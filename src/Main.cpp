

#include <iostream>
#include <ctime>
#include <stdio.h>
#include "Parameters.h"
#include "StringBasics.h"
#include "HaplotypeSet.h"

using namespace std;
void Minimac3Version();
void helpFile();

int main(int argc, char ** argv)
{
	// Parameter Options

	String refHaps = "";
	String haps = "", snps = "";
	String mach = "", shapeit = "";
	String vcf = "Minimac3.Haps.Input";
//	String format = "GT,DS";
//	String recFile = "", errFile = "",chr="",golden="";
//	int cpus=1,start=0, end=0, window=0, max_indiv = 0, max_marker = 0, max_block=0, rounds=5, states=200;
    vector<bool> formatVector(3,false);


	bool gzip = false,params = false,help = false;
//	bool phased = false, doseOutput = false, vcfOutput = true, gzip = false, rsid=false;
//	bool compressOnly=false, onlyRefMarkers=false, , ;

	ParameterList inputParameters;
	BEGIN_LONG_PARAMETERS(longParameterList)
		LONG_PARAMETER_GROUP("Input Haplotypes")
//		LONG_STRINGPARAMETER("mach", &mach)
//		LONG_STRINGPARAMETER("shapeit", &shapeit)
        LONG_STRINGPARAMETER("haps", &haps)
		LONG_STRINGPARAMETER("snps", &snps)

		LONG_PARAMETER_GROUP("Output Parameters")
		LONG_STRINGPARAMETER("prefix", &vcf)
		LONG_PARAMETER("nogzip", &gzip)
		LONG_PARAMETER("params", &params)
		LONG_PARAMETER_GROUP("Other Parameters")
		LONG_PARAMETER("help", &help)
		END_LONG_PARAMETERS();


	inputParameters.Add(new LongParameters(" Command Line Options: ",longParameterList));
    PhoneHome::allThinning = 100;
	Minimac3Version();
    String compStatus;
	inputParameters.Read(argc, &(argv[0]));
	if (help)
	{
		helpFile();
		return(-1);
	}



	inputParameters.Status();
    gzip=1-gzip;

    #ifdef _OPENMP
    omp_set_num_threads(cpus);
    #endif

    if (haps == "" || snps == "" )
    {
        cerr <<" Missing \"--haps\" and/or \"--snps\", both required parameters.\n";
        return(-1);
    }


	int start_time = time(0);
	int time_prev = start_time;

    mach="mach";

//	int time_load = time(0) - time_prev;
	time_prev = time(0);

    HaplotypeSet target;

        cout<<" ------------------------------------------------------------------------------"<<endl;
        cout<<"                          TARGET/GWAS HAPLOTYPE PANEL                         "<<endl;
        cout<<" ------------------------------------------------------------------------------"<<endl;


	    if (!target.LoadTargetHaplotypes(haps, snps))
        {

            cout << "\n Program Exiting ... \n\n";
            return(-1);
        }
        target.PrintVcfFile(vcf, gzip);
//        time_load = time(0) - time_prev;
        time_prev = time(0);
//        cout << "\n Time taken to load target haplotype set = " << time_load << " seconds. "<<endl<<endl;






    cout<<" ------------------------------------------------------------------------------"<<endl;
    cout<<"                                END OF PROGRAM                                 "<<endl;
    cout<<" ------------------------------------------------------------------------------"<<endl;

//    time_load = time(0) - time_prev;
	int time_tot = time(0) - start_time;

//	cout << "\n\n Time taken for Imputation = " << time_load << " seconds. \n";
//

    cout << "\n Program Successfully Implemented... \n ";


	printf("\n Total Run completed in %d hours, %d mins, %d seconds.\n",
		time_tot / 3600, (time_tot % 3600) / 60, time_tot % 60);

    cout<<"\n Thank You for using Minimac3 !!! "<<endl<<endl;



    compStatus="Success";
    PhoneHome::completionStatus(compStatus.c_str());

	return 0;

}




void Minimac3Version()
{
printf("\n\n -------------------------------------------------------------------------------- \n");
	printf("                Mach2VCF - Tool to convert MaCH files to VCF Files               \n");
	printf(" --------------------------------------------------------------------------------\n");

  printf(" (c) 2014 - Sayantan Das\n");
//	printf(" Version	: Undocumented Release\n");
//	printf(" Built		: sayantan\n\n");
	cout<<"\n Version: " << VERSION<< ";\n Built: " << DATE << " by " << USER << std::endl;
}

void helpFile()
{

printf("\n\n -------------------------------------------------------------------------------- \n");
	printf("                Mach2VCF - Tool to convert MaCH files to VCF Files               \n");
	printf(" --------------------------------------------------------------------------------\n");



    printf("\n\t Mach2VCF is a C++ tool to convert phased haplotypes from MaCH to VCF format.\n");

    printf("\n\n\t It has the following usage: \n");
    printf("\n\t ../bin/Mach2VCF --haps input.haps --snps input.snps --prefix output.file \n");
    printf("\n\t where <input.haps> is the input haplotype file and <input.snps> is the SNP list file\n");
    printf("\t both of which are generated by MaCH while <output.file> is the prefix of the output file. \n");
    printf("\n\t Please contact Sayantan Das (Santy) at sayantan@umich.edu for further support ... \n");

    cout<<endl<<endl;
	return;
}


